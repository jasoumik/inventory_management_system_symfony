{% extends 'base.html.twig' %}
    {% block stylesheets %}
        {{ parent() }}
        <link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-grid.css">
        <link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-theme-alpine.css">
    {% endblock %}
{% block title %}StockIn index{% endblock %}

{% block body %}
    {{ include('navbar.html.twig') }}
    <div class="container">
        <h3 class=" text-dark p-2 mt-2">Stock List</h3>
        <div class="d-flex justify-content-center mb-5 ">
            <div id="myGrid" data-url="{{ path('stock_in_grid') }}" class="ag-theme-alpine" style="height:300px;
        width:750px;"></div>
        </div>
    </div>


    {# <h1>StockIn Info</h1> #}

    {# <table class="table"> #}
    {# <thead> #}
    {# <tr> #}
    {# <th>Id</th> #}
    {# <th>Name</th> #}
    {# <th>Date</th> #}
    {# <th>Quantity</th> #}
    {# <th>actions</th> #}
    {# </tr> #}
    {# </thead> #}
    {# <tbody> #}
    {# {% for stock_in in stock_ins %} #}
    {# <tr> #}
    {# <td>{{ stock_in.id }}</td> #}
    {# <td>{{ stock_in.product.name }}</td> #}
    {# <td>{{ stock_in.date ? stock_in.date|date('d-m-Y') : '' }}</td> #}
    {# <td>{{ stock_in.quantity }}</td> #}
    {# <td> #}


    {# </td> #}
    {# </tr> #}
    {# {% else %} #}
    {# <tr> #}
    {# <td colspan="4">No records found</td> #}
    {# </tr> #}
    {# {% endfor %} #}
    {# </tbody> #}
    {# </table> #}

    {# <a href="{{ path('stock_in_new') }}" class="btn btn-info">Create new</a> #}
    {# <br> #}
    {# <a href="{{ path('product_index') }}">Product Home</a> #}


    {% block javascripts %}
        {{ parent() }}
        <script src="https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.noStyle.js"></script>
        <script>
            function actionCellRenderer(params) {
                let eGui = document.createElement("div");

                let editingCells = params.api.getEditingCells();
                // checks if the rowIndex matches in at least one of the editing cells
                let isCurrentRowEditing = editingCells.some((cell) => {
                    return cell.rowIndex === params.node.rowIndex;
                });

                if (isCurrentRowEditing) {
                    eGui.innerHTML = `
        <button
          class="action-button update"
          data-action="update">
               update
        </button>
        <button
          class="action-button cancel"
          data-action="cancel">
               cancel
        </button>
        `;
                } else {
                    eGui.innerHTML = `
        <button
          class="action-button edit"
          data-action="edit">
             edit
          </button>
        <button
          class="action-button delete"
          data-action="delete">
             delete
        </button>
        `;
                }
                return eGui;
            }

            const gridOptions = {
                suppressClickEdit: true,
                onCellClicked(params) {
                    // Handle click event for action cells
                    if (params.column.colId === "action" && params.event.target.dataset.action) {
                        let action = params.event.target.dataset.action;

                        if (action === "edit") {
                            params.api.startEditingCell({
                                rowIndex: params.node.rowIndex,
                                // gets the first columnKey
                                colKey: params.columnApi.getDisplayedCenterColumns()[0].colId
                            });
                        }

                        if (action === "delete") {
                            params.api.applyTransaction({
                                remove: [params.node.data]
                            });
                        }
                    }
                },

                onRowEditingStarted: (params) => {
                    params.api.refreshCells({
                        columns: ["action"],
                        rowNodes: [params.node],
                        force: true
                    });
                },
                onRowEditingStopped: (params) => {
                    params.api.refreshCells({
                        columns: ["action"],
                        rowNodes: [params.node],
                        force: true
                    });
                },
                editType: "fullRow",
                columnDefs: [
                    {headerName: "Id", field: "id", sortable: true, maxWidth: 70},
                    {headerName: "Name", field: "name", sortable: true,},
                    {
                        headerName: "Date", field: "date", sortable: true, cellRenderer: (data) => {
                            return data.value ? (new Date(data.value)).toLocaleDateString() : '';
                        }
                    },
                    {headerName: "Quantity", field: "quantity", sortable: true, maxWidth: 120},
                    {
                        headerName: "action",
                        minWidth: 150,
                        cellRenderer: actionCellRenderer,
                        editable: false,
                        colId: "action"
                    }
                ],
                defaultColDef: {
                    editable: true
                }
            };

            // Keyboard navigation
            // suppressing tabbing away from editing row

            // setup the grid after the page has finished loading
            // document.addEventListener("DOMContentLoaded", function () {
            //     var gridDiv = document.querySelector("#myGrid");
            //
            //     new agGrid.Grid(gridDiv, gridOptions);
            //
            //     agGrid
            //         .simpleHttpRequest({
            //             url: "https://www.ag-grid.com/example-assets/olympic-winners.json"
            //         })
            //         .then(function (data) {
            //             gridOptions.api.setRowData(data.slice(0, 20));
            //         });
            // });

            {# const columnDefs = [ #}
            {# {headerName: "Id", field: "id", sortable: true, maxWidth: 70}, #}
            {# {headerName: "Name", field: "name", sortable: true,}, #}
            {# {headerName: "Date", field: "date", sortable: true,cellRenderer: (data) => { #}
            {# return data.value ? (new Date(data.value)).toLocaleDateString() : ''; #}
            {# } #}
            {# }, #}
            {# {headerName: "Quantity", field: "quantity", sortable: true, maxWidth: 120}, #}
            {# {headerName: "Actions", field: "actions", #}
            {# cellRenderer: function(params){ #}
            {# return "<a href='{{ path('product_index') }}" #}
            {# + params.value #}
            {# + "'>Product "+params.value+"</a>"; #}

            {# } #}
            {# }, #}
            {# ]; #}

            document.addEventListener('DOMContentLoaded', function () {
                const gridDiv = document.querySelector('#myGrid');
                new agGrid.Grid(gridDiv, gridOptions);
                agGrid.simpleHttpRequest({url: $('#myGrid').data('url')}).then(data => {
                    gridOptions.api.setRowData(data);
                })
            });
        </script>
    {% endblock %}

{% endblock %}
